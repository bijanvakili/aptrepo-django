Plan
====
Current -> 0.01 (Core implementation)
- proper web UI templates and interface
	> fix history URLs
	> how to browse sections? (simple/advanced?)
	> top level search UI and search in API
	> copy package
	> error pages (404 and 500)
	> user help pages (initial simple version)
	> show API client setup instructions at a URL
	> logo and favicon
- restrict admin access
- centralize URL generation
	> finalize URL hierarchy (based on UI mockups?)	
- consider renaming 'prune' admin command to 'cleanup' (subclass the django.core command)
- text document for manual setup
	NOTE:  --insecure is required to serve static files

Next -> 0.02 (Deployment)
============
- load settings from etc directory
- Apache and nginx deployment
	> reuse django's templating engine for this?
	> override handling of static files
- packaging/distribution
	> Debian packages
	> python egg?
- full help documentation
	> user
	> admin
	> developer
	
0.03 (Optimization)
====
- web media minification (JS and CSS)
- HTTP request caching
	> memcached
- consider denormalizing (package,version,arch) at the instance level instead of the package level
	> this may help reduce the number of SQL joins

0.04 (UI improvements)
======================
- proper UI images & polished layout
- .csv export for wherever there is an syndication feed
- testing
	- code coverage
	- regression tests that install packages from the repo
	- performance testing
	
future
======
- support for FreeBSD packages (rearchitecture required)
- plugin architecture?
	

Build dependencies
==================
GNU make
python
	django
rsvg

Optional build dependencies
===========================
rhino (for jslint)
pylint

Test dependencies
=================
SQLite

Runtime dependencies
====================
python >= 2.6
	django
	django-piston
	lockfile
	python-apt
	python-debian
	python-pyme
		
Optional runtime dependencies
=============================
django-auth-ldap
pycurl
poster

REST API DESIGN
===============

PUT - idempotent, requires all content and the specific location
POST - not idempotent, requires only partial content and allows server to determine the rest

Nouns & Associated verbs:
	GPG public key (retrieve)
	Distribution (retrieve)
	Section (retrieve)
	Package (retrieve, update, delete)
	Package instance (upload, retrieve, delete, copy)
	Action (retrieve)

	read - GET
	create
	POST (server determines the final URI)
	DELETE
	PUT (copy)


Representations:
	XML
	JSON
	YAML
	.deb (for packages only)
	deb822, .gz (for Packages and Sections only)

	(use ?format HTTP parameter)
	

URL DESIGN:
	Restriction params:
		offset, limit, descending=?


	/aptrepo					(redirect to web/)
	
		(Debian apt repository)
		/repository/
			/keys/				
				/publickey.gpg	(GET)
			/packages/
				/<hashprefix>/<name>_<version>_<architecture>.deb	(GET) 
			/dists/<distribution>/	
				Release(.gpg)		(GET)
				/<section>			
					Packages(.gz)	(GET)
	
		(Web UI)
		/web/				(GET) -- Home page
			/login/			(GET, POST) -- Login page
			/upload/		(GET, POST) -- Upload (to any section)
			/search/		(GET) -- Search entire repository
			/history/		(GET)
				/rss/			(GET)
				/atom/			(GET)
			/distributions/
				/<distribution/
					/history/
						...
					/search/		-- Search only specific distribution
					/sections/
						/<section>/		-- Show package list in section
							/upload/	-- Upload (to specific section)
							/search/	-- Search only specific section
							/history/	-- History of particular section
								...
							/delete			(GET, POST)
							/copy			(GET, POST)
							#<package_name> -- Expand at specific package name
							
		(REST API)
		/api/
			/sessions		(POST) <-- used for logins
				/<token>	(DELETE)
				
			/actions	(GET)
				?min_timestamp=XX&max_timestamp=XX	(GET)		*query
				/<id>								(GET)
			/packages
				/<id>												(GET,DELETE)
				/deb822/<name>/<version>/<architecture>				(GET,DELETE)
				
			/package-instances
				/				(POST)
					?file (file attachment)
					?url=http://xxxx (download from URL)
					?package_id=nnn (clone from existing package)
					?instance_id=nnn (clone from existing package instance)
	  			/<id>			(GET, DELETE)
					/deb822/<name>/<version>/<architecture>				(GET,DELETE)
						
			/distributions	(GET)
				/<id>					(GET)
					/actions		(GET)
						<id>		(GET)
						*query
					/sections				(GET)
					
			/sections 		(GET)
				/<id>		(GET)
				/package-instances	(GET, POST(upload or copy another instance))
					/deb822/<name>/<version>/<architecture>				(GET,DELETE)
				/actions	(GET)

VISUAL ASSETS REQUIRED
======================
Icons:
	RSS [small, medium]
	Atom [small, medium]
	scroll (history) [medium]
	exclamation (warning) [small]
	Magnifying glass (for search bar) [small]
	Open folder [small, medium]
	Closed folder [small]
	Information [small, medium]
	Download [small, medium]

	key (GPG public key) [medium]
	screwdriver & wrench (admin) [medium]
	question mark (help) [medium]
	two pages (copy) [small, medium]
	trash bin (delete) [small, medium]
	red cross (close/remove) [small, medium]
	arrow right [small]
	arrow down [small]

Other:
	Logo [large + favicon]
