Plan
====
Current -> 0.01
- proper web UI templates and interface
	> upload from URL
	> show client setup instructions
	> logo and favicon
	> how to browse sections? (simple/advanced?)
	> copy package
	> top level search
	> UI history
- restrict admin access
- centralize URL generation	
- consider renaming 'prune' admin command to 'cleanup' (subclass the django.core command)
- packaging/distribution
	> Debian packages
	> python egg?
	NOTE:  --insecure is required to serve static files

Next -> 0.02
- Apache and nginx deployment
	> reuse django's templating engine for this?
	> override handling of static files
- documentation
	> user
	> admin
	> developer
- caching
	> memcached
- consider denormalizing (package,version,arch) at the instance level instead of the package level
	> this may help reduce the number of SQL joins
- .csv export for wherever there is an syndication feed
- proper UI images & polished layout
- load settings from etc directory
- testing
	- code coverage
	- regression tests that install packages from the repo

Build dependencies
==================
GNU make
python
	django
rsvg

Test dependencies
=================
SQLite

Runtime dependencies
====================
python >= 2.6
	django
	django-piston
	lockfile
	python-apt
	python-debian
	python-pyme
		
Optional
========
django-auth-ldap
pycurl
poster

REST API DESIGN
===============

PUT - idempotent, requires all content and the specific location
POST - not idempotent, requires only partial content and allows server to determine the rest

Nouns & Associated verbs:
	GPG public key (retrieve)
	Distribution (retrieve)
	Section (retrieve)
	Package (retrieve, update, delete)
	Package instance (upload, retrieve, delete, copy)
	Action (retrieve)

	read - GET
	create
	POST (server determines the final URI)
	DELETE
	PUT (copy)


Representations:
	XML
	JSON
	YAML
	.deb (for packages only)
	deb822, .gz (for Packages and Sections only)

	(use ?format HTTP parameter)
	

URL DESIGN:
/aptrepo
	(standard content)
	/keys				(GET)
		/publickey.gpg	(GET)
	/package
		/<hashprefix>/<name>_<version>_<architecture>.deb	(GET) 

	/rss/
	/atom/
	/history/
	/dists/<distribution>/	(GET)
		/rss/
		/atom/
		/history/
		Release(.gpg)		(GET)
		/<section>			(GET)
			/rss/
			/atom/
			/history/
			Packages(.gz)	(GET)
			<.deb>			(POST) does an upload
			/upload			(GET, POST)
			/delete			(GET, POST)
			/copy			(GET, POST)
			/result			(GET, depends on parameters passed in)
			
	Restriction params:
		offset, limit, descending=?
		

	(REST API)
	/api/
		/sessions		(POST) <-- used for logins
			/<token>	(DELETE)
			
		/actions	(GET)
			?min_timestamp=XX&max_timestamp=XX	(GET)		*query
			/<id>								(GET)
		/packages
			/<id>												(GET,DELETE)
			/deb822/<name>/<version>/<architecture>				(GET,DELETE)
			
		/package-instances
				/<id>			(GET, DELETE)
				/deb822/<name>/<version>/<architecture>				(GET,DELETE)
					
		/distributions	(GET)
			/<id>					(GET)
				/actions		(GET)
					<id>		(GET)
					*query
				/sections				(GET)
				
		/sections 		(GET)
			/<id>		(GET)
			/package-instances	(GET, POST(upload or copy another instance))
				/deb822/<name>/<version>/<architecture>				(GET,DELETE)
			/actions	(GET)

VISUAL ASSETS REQUIRED
======================
Icons:
	RSS [small, medium]
	Atom [small, medium]
	scroll (history) [medium]
	exclamation (warning) [small]
	Magnifying glass (for search bar) [small]
	Open folder [small, medium]
	Closed folder [small]
	Information [small, medium]
	Download [small, medium]

	key (GPG public key) [medium]
	screwdriver & wrench (admin) [medium]
	question mark (help) [medium]
	two pages (copy) [small, medium]
	trash bin (delete) [small, medium]
	red cross (close/remove) [small, medium]
	arrow right [small]
	arrow down [small]

Other:
	Logo [large + favicon]
