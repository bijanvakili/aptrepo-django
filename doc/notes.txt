Remaining goals
===============
- proper web UI templates and interface
	> upload from URL
	> show client setup instructions
	> logo and favicon
	> how to browse sections? (simple/advanced?)
	> copy package
	> top level search
	> UI history
- restrict admin access
- consider denormalizing (package,version,arch) at the instance level instead of the package level
	> this may help reduce the number of SQL joins
- consider renaming 'prune' admin command to 'cleanup' (subclass the django.core command)
- load settings from etc directory
- Apache and nginx deployment
	> reuse django's templating engine for this? 
- packaging/distribution
	> Debian packages
	> python egg?
- documentation
	> user
	> admin
	> developer
- testing
	- code coverage
	- regression tests that install packages from the repo


REST API DESIGN
===============

PUT - idempotent, requires all content and the specific location
POST - not idempotent, requires only partial content and allows server to determine the rest

Nouns & Associated verbs:
	GPG public key (retrieve)
	Distribution (retrieve)
	Section (retrieve)
	Package (retrieve, update, delete)
	Package instance (upload, retrieve, delete, copy)
	Action (retrieve)

	read - GET
	create
	POST (server determines the final URI)
	DELETE
	PUT (copy)


Representations:
	XML
	JSON
	YAML
	.deb (for packages only)
	deb822, .gz (for Packages and Sections only)

	(use ?format HTTP parameter)
	

URL DESIGN:
/aptrepo
	(standard content)
	/keys				(GET)
		/publickey.gpg	(GET)
	/package
		/<hashprefix>/<name>_<version>_<architecture>.deb	(GET) 

	/rss/
		/<distribution> (GET)
			/<section>  (GET)
	/atom/
		/<distribution> (GET)
			/<section>  (GET)
	/dists/<distribution>/	(GET)
		Release(.gpg)		(GET)
		/<section>			(GET)
			Packages(.gz)	(GET)
			<.deb>			(POST) does an upload
			/upload			(GET, POST)
			/delete			(GET, POST)
			/copy			(GET, POST)
			/result			(GET, depends on parameters passed in)
			
	Restriction params:
		offset, limit, descending=?
		

	(REST API)
	/api/
		/sessions		(POST) <-- used for logins
			/<token>	(DELETE)
			
		/actions	(GET)
			?min_timestamp=XX&max_timestamp=XX	(GET)		*query
			/<id>								(GET)
		/packages
			/<id>												(GET,DELETE)
			/deb822/<name>/<version>/<architecture>				(GET,DELETE)
			
		/package-instances
				/<id>			(GET, DELETE)
				/deb822/<name>/<version>/<architecture>				(GET,DELETE)
					
		/distributions	(GET)
			/<id>					(GET)
				/actions		(GET)
					<id>		(GET)
					*query
				/sections				(GET)
				
		/sections 		(GET)
			/<id>		(GET)
			/package-instances	(GET, POST(upload or copy another instance))
				/deb822/<name>/<version>/<architecture>				(GET,DELETE)
			/actions	(GET)
